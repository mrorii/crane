#!/usr/bin/env python

import sys
import logging
import argparse
import pdb
import numpy as np
import pylab as pl
from sklearn.metrics import precision_recall_fscore_support, precision_recall_curve, auc
try:
    import cPickle as pickle
except:
    import pickle

from crane.neural_network import NeuralNetwork
from crane.expression import Expression

def read_states(filename):
    states = []
    with open(filename, 'r') as f:
        for line in f:
            columns = line.strip().split('\t')
            state = map(lambda num: int(num), columns[1].split(','))
            states.append(state)
    return states

def plot_pr_curve(recall, precision, area, filename):
    pl.clf()
    pl.plot(recall, precision, label='Precision-Recall curve')
    pl.xlabel('Recall')
    pl.ylabel('Precision')
    pl.ylim([0.0, 1.05])
    pl.xlim([0.0, 1.0])
    pl.title('Precision-Recall example: AUC=%0.2f' % area)
    pl.legend(loc="lower left")
    pl.savefig(filename)

def main():
    logging.basicConfig(level=logging.INFO, format='%(message)s')

    parser = argparse.ArgumentParser(
        description='Run neural network on resulting subnetworks from crane',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('--expr', help='Path to expression data', required=True)
    parser.add_argument('--label', help='Path to labels (phenotype/control)', required=True)
    parser.add_argument('--eid', help='Path to list of entrez IDs', required=True)
    parser.add_argument('--subgraphs', help='Path to the resulting subnetworks from crane',
            required=True)
    parser.add_argument('--model', help='Path to write/read model', required=True)
    parser.add_argument('--phase', choices=['train', 'test'], required=True)
    parser.add_argument('--alpha', help='alpha: cutoff ratio for H/L', type=float, default=0.25)
    parser.add_argument('--K', help='K: top K states to use', type=int, default=10)
    parser.add_argument('--N', help='N: number of neural nets to train', type=int, default=1)
    parser.add_argument('--plot', help='Path to plot pr curve')
    args = parser.parse_args()

    expr_data = np.loadtxt(open(args.expr))
    eids      = np.array(map(lambda l: int(l.strip()), open(args.eid)))
    labels    = np.array(map(lambda l: int(l.strip()), open(args.label)))
    expression = Expression(expr_data, eids, labels, binarize=True, alpha=args.alpha)
    
    states = read_states(args.subgraphs)[:args.K]
    logging.info('States: %s' % states)

    if args.phase == 'train':
        logging.info('Training network')
        networks = []
        for i in xrange(args.N):
            logging.info('Training network %s...' % (i+1))
            n = NeuralNetwork(states)
            n.train(expression)
            networks.append(n)
        logging.info('Done training network')
        with open(args.model, 'w') as f:
            pickle.dump(networks, f)
    elif args.phase == 'test':
        networks = pickle.load(open(args.model))

        y_true = []
        y_pred = []
        
        for sample, label in expression.iter_sample_label():
            outputs = [n.activate(sample) for n in networks]
            output = np.average(outputs)

            y_true.append(label)
            y_pred.append(output)

        precision, recall, thresholds = \
                precision_recall_curve(np.array(y_true), np.array(y_pred))
        area = auc(recall, precision)
        logging.info('AUC: %.5f' % area)
        if args.plot:
            plot_pr_curve(recall, precision, area, args.plot)

if __name__ == '__main__':
    main()
