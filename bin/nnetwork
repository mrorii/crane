#!/usr/bin/env python

import sys
import logging
import argparse
import pdb
import numpy as np
from sklearn.metrics import precision_recall_fscore_support
try:
    import cPickle as pickle
except:
    import pickle

from crane.neural_network import NeuralNetwork
from crane.expression import Expression

def read_states(filename):
    states = []
    with open(filename, 'r') as f:
        for line in f:
            columns = line.strip().split('\t')
            state = map(lambda num: int(num), columns[1].split(','))
            states.append(state)
    return states

def main():
    logging.basicConfig(level=logging.INFO, format='%(message)s')

    parser = argparse.ArgumentParser(
        description='Run neural network on resulting subnetworks from crane',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('--expr', help='Path to expression data', required=True)
    parser.add_argument('--label', help='Path to labels (phenotype/control)', required=True)
    parser.add_argument('--eid', help='Path to list of entrez IDs', required=True)
    parser.add_argument('--subgraphs', help='Path to the resulting subnetworks from crane',
            required=True)
    parser.add_argument('--model', help='Path to write/read model', required=True)
    parser.add_argument('--phase', choices=['train', 'test'], required=True)
    parser.add_argument('--alpha', help='alpha: cutoff ratio for H/L', type=float, default=0.25)
    parser.add_argument('--K', help='K: top K states to use', type=int, default=10)
    args = parser.parse_args()

    expr_data = np.loadtxt(open(args.expr))
    eids      = np.array(map(lambda l: int(l.strip()), open(args.eid)))
    labels    = np.array(map(lambda l: int(l.strip()), open(args.label)))
    expression = Expression(expr_data, eids, labels, binarize=True, alpha=args.alpha)
    
    states = read_states(args.subgraphs)[:args.K]
    logging.info('States: %s' % states)

    if args.phase == 'train':
        n = NeuralNetwork(states)
        logging.info('Number of features: %d' % n.num_features)
        logging.info('Training network')
        n.train(expression)
        logging.info('Done training network')
        with open(args.model, 'w') as f:
            pickle.dump(n, f)
    elif args.phase == 'test':
        n = pickle.load(open(args.model))

        y_true = []
        y_pred = []
        
        for sample, label in expression.iter_sample_label():
            output = n.activate(sample)

            y_true.append(label)
            y_pred.append(1 if output >= 0.5 else 0)

        precision, recall, f1_score, support = precision_recall_fscore_support(y_true,
                y_pred, beta=1.0, pos_label=1)

        print 'Precision: %.5f' % (precision[1])
        print 'Recall:    %.5f' % (recall[1])
        print 'F1:        %.5f' % (f1_score[1])

if __name__ == '__main__':
    main()
