#!/usr/bin/env python

import sys
import logging
import argparse
import pdb
import numpy as np
try:
    import cPickle as pickle
except:
    import pickle

from crane.core import Core
from crane.expression import Expression

def main():
    logging.basicConfig(level=logging.INFO, format='%(message)s')

    parser = argparse.ArgumentParser(
        description='Run CRANE',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('--graph', help='Path to pickled networkx graph', required=True)
    parser.add_argument('--expr', help='Path to expression data', required=True)
    parser.add_argument('--label', help='Path to labels (phenotype/control)', required=True)
    parser.add_argument('--eid', help='Path to list of entrez IDs', required=True)
    parser.add_argument('--d', help='d: Maximum number of genes in a subnetwork',
                               type=int, required=True, default=6)
    parser.add_argument('--b', help='b: Maximum number of immediate extensions of a subnetwork' \
                               '/state-function pair', type=int, required=True, default=10)
    parser.add_argument('--j', help='j: Threshold on information provided by a state ' \
                               'function on phenotype', type=float, default=0.4)
    parser.add_argument('--alpha', help='alpha: cutoff ratio for H/L', type=float, default=0.25)
    parser.add_argument('--output1', help='output-partial', required=True)
    parser.add_argument('--output2', help='output-full MI', required=True)
    args = parser.parse_args()

    graph     = pickle.load(open(args.graph))
    expr_data = np.loadtxt(open(args.expr))
    eids      = np.array(map(lambda l: int(l.strip()), open(args.eid)))
    labels    = np.array(map(lambda l: int(l.strip()), open(args.label)))

    expression = Expression(expr_data, eids, labels, binarize=True, alpha=args.alpha)

    crane = Core(graph, expression, args.d, args.b, args.j)
    logging.info('Running crane')
    crane.run()
    logging.info('Done running crane')

    with open(args.output1, 'w') as f:
        for state in reversed(sorted(crane.T)):
            f.write('%.8f\t%s\t%s\n' % (state.calc_info(),
                    ','.join(map(lambda gene: str(gene), state.genes)),
                    ','.join(map(lambda ptn: str(ptn), state.expr_ptn))))

    with open(args.output2, 'w') as f:
        for state in reversed(sorted(crane.T, key=lambda state: state.calc_mutual_info())):
            f.write('%.8f\t%s\t%s\n' % (state.calc_mutual_info(),
                    ','.join(map(lambda gene: str(gene), state.genes)),
                    ','.join(map(lambda ptn: str(ptn), state.expr_ptn))))

if __name__ == '__main__':
    main()
